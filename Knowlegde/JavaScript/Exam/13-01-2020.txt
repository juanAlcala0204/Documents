¿Qué es JavaScript?

Javacsript es un lenguaje de scripting multiplataforma interpretado, además de ser orientado a objetos. 
también es un lenguaje de un solo subproceso ( osea que se entiende que solamente
se ejecutará una cosa a la vez ). Se que javascript es un lenguaje de tipado debil ( que
las vairables no se definen el tipo que son). este lenguaje es estandarizado por 
ECMASCRIPT, el cuál rige a javascript, cada navegador cuenta con su propio motor para
correr javacsript, por ejemplo chrome con su enginer v8

¿Como se puede llamar o incluir Javascript?

Javascript al ser un lenguaje de scripting se identificado por ser código que se 
inserta en el HTML a través de etiquetas <script> estás etiquetas actualmente
manejan diferentes maneras de ser llamadas

Forma 1:
Dentro del código HTML se abren etiqeutas tales como:
<script> </script> esto hará que a medida que se vaya ejecutando el DOM ( Dcoment
Object Model) una vez encuentre una etiqueta de este estilo lo lea de arriba para abajo
ejecutando las funciones que tenga dentro.

Formas Non-Blocking:
Non-Blocking significa No bloqueante, sucede que el navegador puede detenerse o pausarse
por culpa de código script que se esta leyendo, causando que se pare el navegador.
Actulamente existen varias formas para manejar este tipo de situaciones.

Forma 1:
Normalmente los desarrolladores tienden a poner sus llamados de <script> a lo último del
DOM, contrayendo con esto, que a mededia de ejecución de la secuencia del DOM, el código
Javascript sea lo último el llamarse.

(Archivos Externos)
* Los siguientes métodos se ejecutan, antes de cualquier evento LOAD de JS
Forma 2:
Se puede utilizar el método defer, el cuál se emplea de la siguiente forma:
<script src="js/js_ejemplo.js" defer> </script>
Defer es un método el cuál se usar para llamar contenido JS de archivos externos
este los ejecutará después de cargado el DOM, con esto se evitará el Blocking del navegador
el problema con este método si respeta el ordne de llamado en los archivos con etiqeuta async

Forma 3:
Se puede emplear el metodo async, este método tiene la misma función de defer, la diferencia
esta en que este método es que no se asegura que respete el orden de llamado.

(Códidgo Non-Blocking dentro de archivos JS o scripts internos del HTML)

---------------------------------------------------------------------------------------------

Tipos de datos en javascript:
- Numbers
- Strings
- Booleano 
- Arrays
- Objetos

---------------------------------------------------------------------------------------------
Forma de declarar una variable en javascript

¿Que es una variable?, una vairable es un contenedor de información.

var - Se declarán variables globales, el scope de esta variable es global
let - Se declarán variables definidas por el scope del contexto
const - Se declarán variales con un scope dependiente del contexto pero no se puedne modificar el valor

¿Qué se debe tener en cuenta con las variables en javascript?

La manera en que se interpreta el código de javacsript, ocasionado un evento llamado hoisting
el hoisting es el contexto de ejecución de javascript, esto ocasiona o define el scope general de las
variables en javascript. 

¿como funciona esto?

El navegador hace una primera lectura de jaavscript, en esta el leerá en código de arriba para abajo y todas las
declaraciones las subirá al inicio de su respectivo contexto, esto tmabién aplica en las funciones declaradas
IMPORTANTE, javascript ignora las inicializaciones de variables.

Ejemplo:

if(){
coso = 0;
const coso;
}

Después de javascript realziar la primer alectura del código:
if(){
const coso;
coso = 0;
}

Recuerda, esto también aplica en las funciones declaradas, pero con las funciones expresadas javacsript las ignorará

-----------------------------------------------------------------------------------------------------------------

Operadores en Javascript

Operadores aritmeticos:
+ suma, - resta, / division, % residuo

Operadores de Comparación
=== igual !== diferente > mayor que <menor que >= mayor igual que <= menor igual que || O && Y

averiguar bien este tema*

----------------------------------------------------------------------------------------------------------------

Condicionales Javacsript
Las condicionales son estructuras d econtrol que nos permiten comparar una cosa con otra

En las condicionales se usa los operadores de comparación y relación

Forma 1 de declaración de una condicional :

if ( condicional ) {
	// code //
}

Forma 2 de declaración abreviada:

if ( condicional ) x;
 Esta condicinonal se usa cuando solo se necesita cumplir una comparación y si cumple, se reotrna inmediatamente un valor

Forma 3 IF TERNARIO:
Un if ternario es una manera abreviada de srealziar una condicional, este se usa normalmente cuando se quiere retornar un
valor y asignarlo sobre una variable

let variable;

variable = condicional ? respuestaAfirmativa : respuestaNegativa;

-----------------------------------------------------------------------------------------------------------------

Bucles en javascript

Los bucles son estructuras que nos ayduna a repetir una acción o detemrinado evento

Forma 1 de declaración de un bucle:

for ( let i = 0; i < variable.length; i++ ) {
}

Forma 2 de declaración de un bucle:
Normalment ese usa en un array
for ( let variable in Array) {
	// en este caso, variable sería el valor de la posición que en ese momento s eencuentre el array
}

Forma 3:
array.foreach( (elemento, indice) => {
	// Como el nombr elo nidica el primer argumento, es el elemento dodne esta el array actual
	// El segundo argumento es el indice en el que se encuentra el array
});

Bucle While:

while ( condicional ){
	// condigo, el bucle solo se romperá una vez el condicional se cumpla
}

Bucle Do While:

do{
	// cdoigo, aquí es lo mismo que while, pero con la diferencia que la primera vez si entrará al bucle
}while()


--------------------------------------------------------------------------------------------------------------------

Funciones en Javascript

Funciones Declaradas:

Forma 1 de declaración:

function nombreFuncion() { 
	// code
}

Funcion expresada
Esta función también se denomina función anonima, está se puede llamar por el nombre de su variable declarada
const variable = function () {
	// code
}

Forma 2 de declaración funcion expresada
Se puede declarar también con funciones de flecha

const variable = () => {
	//code
}

En las funciones de flecha, si solo de tiene un argumento ( parametro) no es necesario poner los parentesis

Forma 3 (abreviada)

const variable = () => coso;

Parametros de funciones:

Las funciones en javascript pueden recibir parametros / argumentos.

Parametros normales

function nombreFuncion( param1, param2, param3) {
}

Parametro Rest:

Se usan cuando no se sabe la cantidad de parametros que va a llegar

function nombreRest( ..arrayParametros ) {
	arrayParametros[0] sería igual a param1 por ejemplo
}

nombreRest( param1, param2, param3 );

Paraemtro Spread:

Se usan cuando tienes un array y dentro del array los elementos que contiene son los parametros que debe recibir la funcion

function nombreSpread( param1, param2, param3 ) {
}

nombreSpread(...arrayParametros);

De esta manera la función cogera los valores del array y llenará sus propios parametros en orden de llegada de los valores
del array

Parametro no necesario:

function nombreNoNecesario( param1, paramNoNecesario = "") {
}

Esto da a indicar que si no se pon el segundo paraemtro en el momento que se invoque la function, entonces el segundo para
metro será definido por default con un ""

Funcion como paraemtro
 También puedes enviar una fucnión como parámetro

function nombreFunction( param1, paramFunction = "" ) {
	let suma;

	suma = paramFunction(param1);
}

let variable = nombreFunction(param1, (param1) => {
	// códgio d ela función que se enviará como parámetros
})

---------------------------------------------------------------------------------------------------------------

Arrays en Javascript

Un array o también conocido como lista,s son un conjunto de información

declaración array jaavscript:

let arraNombre = [];

arrayNombre = [1,2,3,4,5];

Formas de recorrer un array

clandestina
for ( let i = 0; i < arrayNombre.length; i++) {
	arrayNombre[i]; esto sería el valor de la primera posición del array
}
forma 2
arrayNombre.foreach( (elemento,indice) => {
	console.log(elemento); // si es un array unidimensional con la función foreach, el argumento elemento, sería el valor
				 que tiene la posición en la que este el foreach

	indice, sería la posición en la que esta.	
});
forma 3 
for (let valor in arrayNombre) {
	valor es el valor en el aqu es eencuentre el array en ese momento
}

Array BIDIMENSIONAL / MATRIZ

Un array bidimensional es denominado como una matriz también o tambipén es conocido por ser un array de arrays

let array1 [];
    array2 [];
    array2 [];

array1 = [1,2,3];

Entonces ¿Qués es un matriz o array bdiimensional o array de arrays?
En si se intepretaría de la sigueinte manera, en la matriz, tiene una primer aposición la cuál tiene un array
entonces matris[0] entrarías al primer array, y para entrar a su contendio accedes así, matriz[0][1] esto sería que entraste
a la primera posición de la matriz y primera posición del array dentor d eest aprimer aposciión de la matriz

Formas de leer una matriz

clandestina

for (let i = 0; i < matriz.length; i++) {
	// aqui recorres la matriz
	for ( let j = 0; j < matriz[i].length; j++) {
		// aquí recorres el contenido de la primera posición de la matriz
	}
}

forma 1: En este ejemplo se hará que recorra la matirz y al primer numero que sea igual al que s ele envíe a la funcion se 
salga de todo

let matriz = [];
    array2 = [];
    array3 = [];

array2 = [1,2,3];
array3 = [5,2,3];
matriz = [array2,array3];

recorrerArray(matriz,5);

function callMeBack( arrayPrueba, numeroDeseado ) {
  matriz.forEach( ( elemento ) => {
    if ( elmento == numeroDeseado ) {
      return elemento;
    } else {
      return 0;
    };
  });
}

function recorrerArray( matriz,numeroDeseado ) {
  try{

    matriz.forEach( ( elemento ) => {
      let arrayActual = 0;

      arrayActual = callMeBack(elemento,numeroDeseado);

      if(arrayActual !== 0) throw BreakException;
    })

  }catch(error){
    console.log(numeroDeseado)
  }
  

}

Forma 3: Es lo mismo de arriba pero con for 

for (let i = 0; i < matriz.length; i++) {
	let j;
	for ( j = 0; j < matriz[i].length; j++) {
    
		document.write(matriz[i][j] + "<br>");
  
    console.log(matriz[i][j]);
    if(matriz[i][j] == 1) break;
	}

  if(matriz[i][j] == 1) break;
}


Objetos Javascript 

De que manera se crean los objetos en javascript?

let objetoName = {};

objetoName = {
	nombre : "Juan",
	edad: 13,
	apellido: "Alcala"
}

Un array de objetos sería

let arrayName = [];

arrayName = [{nombre: "Juan"},{nombre: "Camilo"}];

¿Como recorrer un objeto?

Forma 1 si es solamente un objeto de por si

for ( let valorPosicion in objetoName ) {
	objetoName[valorPosicion]
}

Forma 2 si es un array de objetos

objetoName.forEach( (elemento, indice) => {
	objetoName[elemento]
});

Dato curioso, hacer esto para acceder a los valores
coso.members[1].powers[2] 
es igual a yo hacer esto
coso['members'][1]['powers'][2]

